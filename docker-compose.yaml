version: '3'
services:
  # zookeeper:
  #   image: zookeeper:latest
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
     # - "9092:9092" # internal
     # - "9093:9093" # Port for the KRaft controller
     # - 9094:9094 #external
    environment:
      #KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092

      KAFKA_PROCESS_ROLES: 'broker,controller'
      # A unique ID for the node
      KAFKA_NODE_ID: 1
      # The list of nodes that are eligible to be controllers (in this case, just this one)
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      # Log directories for Kafka data
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'
      


      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      
      # Define the addresses the broker will listen on.
      # 0.0.0.0 means it will listen on all network interfaces inside the container.
      KAFKA_LISTENERS: 'CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9094'
      
      # Define the addresses clients should use to connect.
      # For internal clients (other containers), use the service name 'kafka'.
      # For external clients (your host machine), use 'localhost'.
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:9092,EXTERNAL://localhost:9094'
      
      # Specify which listener is used for communication between brokers.
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'



      # --- Other settings ---
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      
      # Use the Cluster ID you generated in Step 1
      CLUSTER_ID: 'E2o_A0_xR8e-P1XJ1XjYjw' # <---- PASTE YOUR GENERATED CLUSTER ID 

    # depends_on:
    #   - zookeeper

  debezium:
    image: debezium/connect:2.7.3.Final
    container_name: debezium_connect
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_config
      OFFSET_STORAGE_TOPIC: debezium_offset
      STATUS_STORAGE_TOPIC: debezium_status
    depends_on:
      - kafka

  mongodb:
    image: mongo:latest
    container_name: mongodb
    command: ["mongod", "--replSet", "rs0"]
    ports:
      - "27017:27017"

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: production_database
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: secretPassword


  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"

  consumer:
    # This tells Docker Compose to build the image from the Dockerfile
    # in the ./consumer-app directory.
    build: ./consumer-app 
    container_name: consumer
    environment:
      # CRITICAL: Use the Docker service names, not localhost!
      # We use the Kafka INTERNAL listener (port 9092) we configured earlier.
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:9092'
      
      # The connection string points to the 'postgres' service container.
      POSTGRES_CONNECTION_STRING: 'Host=postgres;Port=5432;Username=app_user;Password=secretPassword;Database=production_database'
    depends_on:
      # Ensures the consumer starts only after its dependencies are ready.
      - kafka
      - postgres
